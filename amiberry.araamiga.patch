diff --git a/Android.mk b/Android.mk
index ee2df16a..bc6f4358 100644
--- a/Android.mk
+++ b/Android.mk
@@ -182,7 +182,9 @@ LOCAL_SRC_FILES := src/archivers/7z/BraIA64.c \
                     src/osdep/gui/main_window.cpp \
                     src/osdep/gui/Navigation.cpp \
                     src/osdep/gui/androidsdl_event.cpp \
-                    src/osdep/gui/PanelOnScreen.cpp
+                    src/osdep/gui/PanelOnScreen.cpp \
+                    src/araamiga/utils.cpp \
+                    src/araamiga/handler.cpp
 
 ifeq ($(TARGET_ARCH_ABI),arm64-v8a)
     LOCAL_SRC_FILES += src/osdep/aarch64_helper_min.s
diff --git a/CMakeLists.txt b/CMakeLists.txt
index caa088f0..dcfcf31b 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -166,6 +166,8 @@ set(SRC_FILES
         src/osdep/amiberry_rp9.cpp
         src/osdep/amiberry_mem.cpp
         src/osdep/amiberry_whdbooter.cpp
+        src/araamiga/utils.cpp
+        src/araamiga/handler.cpp
         src/osdep/sigsegv_handler.cpp
         src/sounddep/sound.cpp
         src/osdep/gui/InGameMessage.cpp
diff --git a/Makefile b/Makefile
index 4872239e..6686abdb 100644
--- a/Makefile
+++ b/Makefile
@@ -438,7 +438,10 @@ OBJS =	\
 	src/osdep/gui/PanelPrio.o \
 	src/osdep/gui/PanelSavestate.o \
 	src/osdep/gui/main_window.o \
-	src/osdep/gui/Navigation.o
+	src/osdep/gui/Navigation.o \
+	src/araamiga/handler.o \
+	src/araamiga/ini-exec.o \
+	src/araamiga/utils.o
 
 ifeq ($(ANDROID), 1)
 OBJS += src/osdep/gui/androidsdl_event.o \
diff --git a/conf/amiberry.conf b/conf/amiberry.conf
index 542086c4..16b3fb25 100644
--- a/conf/amiberry.conf
+++ b/conf/amiberry.conf
@@ -6,20 +6,19 @@ swap_win_alt_keys=no
 gui_joystick_control=yes
 use_sdl2_render_thread=no
 input_default_mouse_speed=100
-input_keyboard_as_joystick_stop_keypresses=no
 default_open_gui_key=F12
 default_quit_key=
 default_ar_key=Pause
 default_fullscreen_toggle_key=
 rotation_angle=0
-default_horizontal_centering=no
+default_horizontal_centering=yes
 default_vertical_centering=no
 default_scaling_method=-1
 default_frameskip=no
 default_correct_aspect_ratio=yes
 default_auto_height=no
-default_width=640
-default_height=512
+default_width=720
+default_height=270
 default_fullscreen=no
 default_stereo_separation=7
 default_joystick_deadzone=33
@@ -31,4 +30,53 @@ default_controller2=joy2
 default_controller3=
 default_controller4=
 default_mouse1=mouse
-default_mouse2=joy0
\ No newline at end of file
+default_mouse2=joy0
+path=/home/pi/projects.local/
+config_path=/home/pi/projects.local/amiberry/conf/
+controllers_path=/home/pi/projects.local/amiberry/controllers/
+retroarch_config=/home/pi/projects.local/amiberry/conf/retroarch.cfg
+logfile_path=/home/pi/projects.local/amiberry/amiberry.log
+rom_path=/home/pi/projects.local/amiberry/kickstarts/
+ROMs=13
+ROMName=KS ROM v1.2 (A500,A1000,A2000) rev 33.180 (256k) [315093-01]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/Kickstart1.2.rom
+ROMType=256
+ROMName=KS ROM v1.3 (A500,A1000,A2000) rev 34.5 (256k) [315093-02]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/Kickstart1.3.rom
+ROMType=256
+ROMName=KS ROM v2.04 (A500+) rev 37.175 (512k) [390979-01]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/Kickstart2.0.rom
+ROMType=256
+ROMName=KS ROM v3.0 (A4000) rev 39.106 (512k) [391513-02/391514-02]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/Kickstart3.0.rom
+ROMType=256
+ROMName=KS ROM v3.1 (A500,A600,A2000) rev 40.63 (512k)
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/Kickstart3.1.rom
+ROMType=256
+ROMName=KS ROM v3.1 (A500,A600,A2000) rev 40.63 (512k)
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/Kickstart4.0.rom
+ROMType=256
+ROMName=KS ROM v1.2 (A500,A1000,A2000) rev 33.180 (256k) [315093-01]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/kick33180.A500
+ROMType=256
+ROMName=KS ROM v1.2 (A500,A1000,A2000) rev 33.180 (256k) [315093-01]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/kick33192.A500
+ROMType=256
+ROMName=KS ROM v1.3 (A500,A1000,A2000) rev 34.5 (256k) [315093-02]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/kick34005.A500
+ROMType=256
+ROMName=KS ROM v3.1 (A1200) rev 40.68 (512k) [391773-01/391774-01]
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/kick40068.A1200
+ROMType=256
+ROMName=KS ROM v3.1 (A4000) rev 40.68 (512k)
+ROMPath=/home/pi/projects.local/amiberry/kickstarts/kick40068.A4000
+ROMType=256
+ROMName=Freezer: HRTMon v2.37 (built-in)
+ROMPath=:HRTMon
+ROMType=524291
+ROMName= AROS KS ROM (built-in) (1024k)
+ROMPath=:AROS
+ROMType=256
+MRUDiskList=0
+MRUCDList=0
+MRUWHDLoadList=0
diff --git a/src/araamiga/consts.h b/src/araamiga/consts.h
new file mode 100644
index 00000000..d568d30c
--- /dev/null
+++ b/src/araamiga/consts.h
@@ -0,0 +1,8 @@
+#ifndef ARAAMIGA_CONSTS_H_
+#define ARAAMIGA_CONSTS_H_
+
+#define TMP_INI_FILE "amiberry.tmp.ini"
+#define APP_NAME "ARAAMIGA"
+#define STRING_BUFFER_LENGTH 255
+
+#endif  // ARAAMIGA_CONSTS_H_
diff --git a/src/araamiga/externals.h b/src/araamiga/externals.h
new file mode 100644
index 00000000..e970d747
--- /dev/null
+++ b/src/araamiga/externals.h
@@ -0,0 +1,22 @@
+#ifndef ARAAMIGA_EXTERNALS_H_
+#define ARAAMIGA_EXTERNALS_H_
+
+extern struct uae_prefs currprefs, changed_prefs;
+extern char last_active_config[4096];
+
+void uae_quit(void);
+void uae_reset(int hardreset, int keyboardreset);
+void ext_disk_eject(int num);
+void ext_disk_insert_force(int num, const char *name, bool forcedwriteprotect);
+void ext_cfgfile_parse_line_hw(char *config_string);
+int kill_filesys_unitconfig (struct uae_prefs *p, int nr);
+void set_config_changed(void);
+void gui_force_rtarea_hdchange();
+void RefreshPanelHD();
+void filesys_reset (void);
+int filesys_eject(int nr);
+int target_cfgfile_load(struct uae_prefs* p, const char* filename, int type, int isdefault);
+void disable_resume();
+void refresh_all_panels();
+
+#endif  // ARAAMIGA_EXTERNALS_H_
diff --git a/src/araamiga/handler.cpp b/src/araamiga/handler.cpp
new file mode 100644
index 00000000..13500d15
--- /dev/null
+++ b/src/araamiga/handler.cpp
@@ -0,0 +1,24 @@
+#include "consts.h"
+#include "handler.h"
+#include "ini-exec.h"
+
+#include <stdio.h>
+#include <signal.h>
+#include <unistd.h>
+
+
+void SIGUSR1_handler(int signum)
+{
+    printf("[%s] received USR1 signal\n", APP_NAME);
+
+    execute_ini_file(TMP_INI_FILE);
+
+    printf("[%s] done processing signal\n", APP_NAME);
+}
+
+
+void araamiga_handler_init() {
+    printf("[%s] initialise handlers\n", APP_NAME);
+
+    signal(SIGUSR1, SIGUSR1_handler);
+}
diff --git a/src/araamiga/handler.h b/src/araamiga/handler.h
new file mode 100644
index 00000000..d276f220
--- /dev/null
+++ b/src/araamiga/handler.h
@@ -0,0 +1,7 @@
+#ifndef ARAAMIGA_HANDLER_H_
+#define ARAAMIGA_HANDLER_H_
+
+void SIGUSR1_handler(int signum);
+void araamiga_handler_init();
+
+#endif  // ARAAMIGA_HANDLER_H_
diff --git a/src/araamiga/ini-exec.cpp b/src/araamiga/ini-exec.cpp
new file mode 100644
index 00000000..26fe58c5
--- /dev/null
+++ b/src/araamiga/ini-exec.cpp
@@ -0,0 +1,207 @@
+#include <string>
+#include <cstring>
+#include <fstream>
+#include <iostream>
+#include <unistd.h>
+
+#include "ini-exec.h"
+#include "consts.h"
+#include "externals.h"
+#include "utils.h"
+
+
+char config_string[STRING_BUFFER_LENGTH];
+
+
+int execute_ini_file(const std::string &pathname) {
+    std::ifstream file(pathname);
+    std::string line;
+    bool commands_mode = false;
+
+    printf("[%s] executing temporary INI file\n", APP_NAME);
+
+    if (!file.is_open()) {
+        printf("[%s] cannot open INI file\n", APP_NAME);
+        return 1;
+    }
+
+    while (std::getline(file, line)) {
+        line = string_cut_to_string(line, "#");
+        line = string_trim(line);
+
+        if (line == "") {
+            continue;
+        }
+
+        if (string_starts_with(line, "[") && string_ends_with(line, "]")) {
+            if (line == "[commands]") {
+                commands_mode = true;
+                continue;
+            }
+            else {
+                commands_mode = false;
+                continue;
+            }
+        }
+
+        if (commands_mode) {
+            _execute_command(line);
+        }
+    }
+
+    file.close();
+
+    return 0;
+}
+
+
+void _comand_ext_disk_eject(const std::string &command_data) {
+    ext_disk_eject(atoi(command_data.c_str()));
+}
+
+
+void _comand_ext_disk_insert_force(const std::string &command_data) {
+    std::vector<std::string> parts;
+
+    parts = string_split(command_data, ',');
+
+    if (parts.size() != 3) {
+        printf("[%s] skip wrong formatted command: %s\n", APP_NAME, command_data.c_str());
+        return;
+    }
+
+    ext_disk_insert_force(
+        atoi(parts[0].c_str()),
+        parts[1].c_str(),
+        atoi(parts[2].c_str())
+    );
+}
+
+
+void _comand_ext_cfgfile_parse_line_hw(const std::string &command_data) {
+    memset(config_string, 0, STRING_BUFFER_LENGTH);
+    strncpy(config_string, command_data.c_str(), STRING_BUFFER_LENGTH);
+
+    ext_cfgfile_parse_line_hw(config_string);
+}
+
+
+void _comand_uae_reset(const std::string &command_data) {
+    std::vector<std::string> parts;
+
+    parts = string_split(command_data, ',');
+
+    if (parts.size() != 2) {
+        printf("[%s] skip wrong formatted command: %s\n", APP_NAME, command_data.c_str());
+        return;
+    }
+
+    uae_reset(
+        atoi(parts[0].c_str()),
+        atoi(parts[1].c_str())
+    );
+}
+
+
+void _comand_target_cfgfile_load(const std::string &command_data) {
+    std::vector<std::string> parts;
+
+    parts = string_split(command_data, ',');
+
+    if (parts.size() != 3) {
+        printf("[%s] skip wrong formatted command: %s\n", APP_NAME, command_data.c_str());
+        return;
+    }
+    printf("%s\n", parts[0].c_str());
+    printf("%d\n", atoi(parts[1].c_str()));
+    printf("%d\n", atoi(parts[2].c_str()));
+
+    // disable_resume();
+    target_cfgfile_load( 
+        &currprefs,
+        parts[0].c_str(),
+        atoi(parts[1].c_str()),
+        atoi(parts[2].c_str())
+    );
+    // target_cfgfile_load(
+    //     &changed_prefs,
+    //     parts[0].c_str(),
+    //     atoi(parts[1].c_str()),
+    //     atoi(parts[2].c_str())
+    // );
+
+    // strncpy(last_active_config, parts[0].c_str(), 4096);
+    // refresh_all_panels();
+}
+
+
+int _execute_command(const std::string &command) {
+    std::string raw_command;
+
+    if (!string_starts_with(command, "cmd")) {
+        return 1;
+    }
+
+    if (command.find("=") == std::string::npos) {
+        return 1;
+    }
+
+    raw_command = string_cut_from_string(command, "=");
+
+    printf("[%s] raw command: %s\n", APP_NAME, raw_command.c_str());
+
+    if (string_starts_with(raw_command, "ext_disk_eject ")) {
+        _comand_ext_disk_eject(string_cut_from_string(raw_command, " "));
+    }
+    else if (string_starts_with(raw_command, "ext_disk_insert_force ")) {
+        _comand_ext_disk_insert_force(string_cut_from_string(raw_command, " "));
+    }
+    else if (string_starts_with(raw_command, "uae_reset ")) {
+        _comand_uae_reset(string_cut_from_string(raw_command, " "));
+    }
+    else if (string_starts_with(raw_command, "uae_quit ")) {
+        uae_quit();
+    }
+    else if (string_starts_with(raw_command, "ext_cfgfile_parse_line_hw ")) {
+        _comand_ext_cfgfile_parse_line_hw(string_cut_from_string(raw_command, " "));
+    }
+    else if (string_starts_with(raw_command, "kill_filesys_unitconfig ")) {
+        kill_filesys_unitconfig(
+            &changed_prefs,
+            atoi(string_cut_from_string(raw_command, " ").c_str())
+        );
+    }
+    else if (string_starts_with(raw_command, "kill_filesys_unitconfig2 ")) {
+        kill_filesys_unitconfig(
+            &currprefs,
+            atoi(string_cut_from_string(raw_command, " ").c_str())
+        );
+    }
+    else if (string_starts_with(raw_command, "sleep ")) {
+        sleep(
+            atoi(string_cut_from_string(raw_command, " ").c_str())
+        );
+    }
+    else if (string_starts_with(raw_command, "set_config_changed")) {
+        set_config_changed();
+    }
+    else if (string_starts_with(raw_command, "gui_force_rtarea_hdchange")) {
+        gui_force_rtarea_hdchange();
+    }
+    else if (string_starts_with(raw_command, "RefreshPanelHD")) {
+        RefreshPanelHD();
+    }
+    else if (string_starts_with(raw_command, "filesys_reset")) {
+        filesys_reset();
+    }
+    else if (string_starts_with(raw_command, "filesys_eject ")) {
+        filesys_eject(
+            atoi(string_cut_from_string(raw_command, " ").c_str())
+        );
+    }
+    else if (string_starts_with(raw_command, "target_cfgfile_load ")) {
+        _comand_target_cfgfile_load(string_cut_from_string(raw_command, " "));
+    }
+
+    return 0;
+}
diff --git a/src/araamiga/ini-exec.h b/src/araamiga/ini-exec.h
new file mode 100644
index 00000000..fc9e26e4
--- /dev/null
+++ b/src/araamiga/ini-exec.h
@@ -0,0 +1,15 @@
+#ifndef ARAAMIGA_INI_EXEC_H_
+#define ARAAMIGA_INI_EXEC_H_
+
+#include <string>
+
+int execute_ini_file(const std::string &pathname);
+int _execute_command(const std::string &command);
+
+void _comand_ext_disk_eject(const std::string &command_data);
+void _comand_ext_disk_insert_force(const std::string &command_data);
+void _comand_uae_reset(const std::string &command_data);
+void _comand_ext_cfgfile_parse_line_hw(const std::string &command_data);
+void _comand_target_cfgfile_load(const std::string &command_data);
+
+#endif  // ARAAMIGA_INI_EXEC_H_
diff --git a/src/araamiga/utils.cpp b/src/araamiga/utils.cpp
new file mode 100644
index 00000000..4f76a12a
--- /dev/null
+++ b/src/araamiga/utils.cpp
@@ -0,0 +1,78 @@
+#include <iostream>
+#include <sstream>
+#include <vector>
+
+#include "utils.h"
+
+
+std::string string_ltrim(const std::string& str, const std::string& chars)
+{
+    std::string str_copy = str;
+
+    str_copy.erase(0, str_copy.find_first_not_of(chars));
+    return str_copy;
+}
+
+
+std::string string_rtrim(const std::string& str, const std::string& chars)
+{
+    std::string str_copy = str;
+
+    str_copy.erase(str_copy.find_last_not_of(chars) + 1);
+    return str_copy;
+}
+
+
+std::string string_trim(const std::string& str, const std::string& chars)
+{
+    return string_ltrim(string_rtrim(str, chars), chars);
+}
+
+
+bool string_starts_with(const std::string& str, const std::string& needle) {
+    return str.find(needle) == 0;
+}
+
+
+bool string_ends_with(const std::string& str, const std::string& needle) {
+    return str.find(needle) == str.size() - 1;
+}
+
+
+std::string string_cut_to_string(const std::string& str, const std::string str2) {
+    std::size_t pos;
+
+    pos = str.find(str2);
+
+    if (pos == std::string::npos) {
+        return str;
+    }
+
+    return str.substr(0, pos);
+}
+
+
+std::string string_cut_from_string(const std::string& str, const std::string str2) {
+    std::size_t pos;
+
+    pos = str.find(str2);
+
+    if (pos == std::string::npos) {
+        return str;
+    }
+
+    return str.substr(pos + 1);
+}
+
+
+std::vector<std::string> string_split(const std::string &s, char delim) {
+    std::vector<std::string> result;
+    std::stringstream ss (s);
+    std::string item;
+
+    while (getline(ss, item, delim)) {
+        result.push_back (item);
+    }
+
+    return result;
+}
diff --git a/src/araamiga/utils.h b/src/araamiga/utils.h
new file mode 100644
index 00000000..d16e01a2
--- /dev/null
+++ b/src/araamiga/utils.h
@@ -0,0 +1,21 @@
+#ifndef ARAAMIGA_UTILS_H_
+#define ARAAMIGA_UTILS_H_
+
+#include <string>
+#include <iostream>
+#include <sstream>
+#include <vector>
+
+std::string string_ltrim(const std::string& str, const std::string& chars = "\t\n\v\f\r ");
+std::string string_rtrim(const std::string& str, const std::string& chars = "\t\n\v\f\r ");
+std::string string_trim(const std::string& str, const std::string& chars = "\t\n\v\f\r ");
+
+bool string_starts_with(const std::string& str, const std::string& needle);
+bool string_ends_with(const std::string& str, const std::string& needle);
+
+std::string string_cut_to_string(const std::string& str, const std::string str2);
+std::string string_cut_from_string(const std::string& str, const std::string str2);
+
+std::vector<std::string> string_split(const std::string &s, char delim);
+
+#endif  // ARAAMIGA_UTILS_H_
diff --git a/src/cfgfile.cpp b/src/cfgfile.cpp
index 58b02fc4..30da1a8b 100644
--- a/src/cfgfile.cpp
+++ b/src/cfgfile.cpp
@@ -3522,12 +3522,18 @@ static int cfgfile_parse_host(struct uae_prefs* p, TCHAR* option, TCHAR* value)
 		|| cfgfile_strval(option, value, _T("absolute_mouse"), &p->input_tablet, abspointers, 0))
 		return 1;
 
-	if (cfgfile_yesno(option, value, _T("magic_mouse"), &vb)) {
-		if (vb)
-			p->input_mouse_untrap |= MOUSEUNTRAP_MAGIC;
-		else
-			p->input_mouse_untrap &= ~MOUSEUNTRAP_MAGIC;
-		return 1;
+	if (!_tcsicmp(option, _T("magic_mouse")) && !_tcsicmp(value, _T("none"))) {
+		// disable mouse ungrab on middle click
+		p->input_mouse_untrap = MOUSEUNTRAP_NONE;
+	}
+	else {
+		if (cfgfile_yesno(option, value, _T("magic_mouse"), &vb)) {
+			if (vb)
+				p->input_mouse_untrap |= MOUSEUNTRAP_MAGIC;
+			else
+				p->input_mouse_untrap &= ~MOUSEUNTRAP_MAGIC;
+			return 1;
+		}
 	}
 
 #ifdef GFXFILTER
diff --git a/src/disk.cpp b/src/disk.cpp
index 2e8c716e..6e481f85 100644
--- a/src/disk.cpp
+++ b/src/disk.cpp
@@ -2909,6 +2909,14 @@ TCHAR *DISK_history_get (int idx, int type)
 	return dfxhistory[type][idx];
 }
 
+void ext_disk_eject(int num) {
+    disk_eject(num);
+}
+
+void ext_disk_insert_force(int num, const char *name, bool forcedwriteprotect) {
+    disk_insert_force(num, name, forcedwriteprotect);
+}
+
 static void disk_insert_2 (int num, const TCHAR *name, bool forced, bool forcedwriteprotect)
 {
 	drive *drv = floppy + num;
diff --git a/src/main.cpp b/src/main.cpp
index 0f62bff2..7daf8a59 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -770,6 +770,10 @@ std::string get_filename_extension(const TCHAR* filename)
 	return fName.substr(pos, fName.length());
 }
 
+void ext_cfgfile_parse_line_hw(char *config_string) {
+	cfgfile_parse_line(&currprefs, config_string, 0);
+}
+
 static void parse_cmdline(int argc, TCHAR** argv)
 {
 	static bool started;
diff --git a/src/osdep/amiberry.cpp b/src/osdep/amiberry.cpp
index 5dc6deee..1854ae5e 100644
--- a/src/osdep/amiberry.cpp
+++ b/src/osdep/amiberry.cpp
@@ -48,6 +48,8 @@
 #include "clipboard.h"
 #include "uae/uae.h"
 
+#include "araamiga/handler.h"
+
 extern FILE* debugfile;
 
 int pause_emulation;
@@ -84,12 +86,18 @@ std::string get_version_string()
 
 void set_key_configs(struct uae_prefs* p)
 {
-	if (strncmp(p->open_gui, "", 1) != 0)
-		// If we have a value in the config, we use that instead
-		enter_gui_key = SDL_GetKeyFromName(p->open_gui);
-	else
-		// Otherwise we go for the default found in amiberry.conf
-		enter_gui_key = SDL_GetKeyFromName(amiberry_options.default_open_gui_key);
+	if (strncmp(p->open_gui, "none", 4) != 0) {
+		if (strncmp(p->open_gui, "", 1) != 0)
+			// If we have a value in the config, we use that instead
+			enter_gui_key = SDL_GetKeyFromName(p->open_gui);
+		else
+			// Otherwise we go for the default found in amiberry.conf
+			enter_gui_key = SDL_GetKeyFromName(amiberry_options.default_open_gui_key);
+	}
+	else {
+		// open_gui is "none", so "enter_gui_key" will be disabled
+		enter_gui_key = -1;
+	}
 	// if nothing was found in amiberry.conf either, we default back to F12
 	if (enter_gui_key == 0)
 		enter_gui_key = SDLK_F12;
@@ -1424,6 +1432,8 @@ int main(int argc, char* argv[])
 		abort();
 	}
 
+	araamiga_handler_init();
+
 	alloc_AmigaMem();
 	RescanROMs();
 	clipboard_init();
@@ -2065,4 +2075,4 @@ bool get_plugin_path(TCHAR* out, int len, const TCHAR* path)
 		out[0] = '\0';
 	}
 	return TRUE;
-}
\ No newline at end of file
+}
diff --git a/src/osdep/gui/PanelHD.cpp b/src/osdep/gui/PanelHD.cpp
index f54c31b2..f557f3a3 100644
--- a/src/osdep/gui/PanelHD.cpp
+++ b/src/osdep/gui/PanelHD.cpp
@@ -387,6 +387,8 @@ void InitPanelHD(const struct _ConfigCategory& category)
 		listCmdDelete[row]->setId(tmp);
 		listCmdDelete[row]->addActionListener(hdRemoveActionListener);
 
+		// listCmdDelete[row]->
+
 		for (col = 0; col < COL_COUNT; ++col)
 		{
 			listCells[row][col] = new gcn::TextField();
diff --git a/src/zfile.cpp b/src/zfile.cpp
index 6bc1330a..82cae620 100644
--- a/src/zfile.cpp
+++ b/src/zfile.cpp
@@ -2435,6 +2435,9 @@ uae_u32 zfile_crc32 (struct zfile *f)
 	int pos, size;
 	uae_u32 crc;
 
+	// disable crc32 to speedup loading from floppy drive
+	return 0;
+
 	if (!f)
 		return 0;
 	if (f->data)
